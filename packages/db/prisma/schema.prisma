generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String          @id @default(cuid())
  name                 String?
  email                String          @unique
  emailVerified        DateTime?
  password             String?
  image                String?
  accounts             Account[]
  sessions             Session[] 
  bookings             Booking[]
  reviews              Review[]
  memberships          Membership[]
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
}
 
model Account {
  userId               String
  type                 String
  provider             String
  providerAccountId    String
  refresh_token        String?
  access_token         String?
  expires_at           Int?
  token_type           String?
  scope                String?
  id_token             String?
  session_state        String?

  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  user                 User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken        String   @unique
  userId              String
  expires             DateTime
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}
 
model VerificationToken {
  identifier          String
  token               String
  expires             DateTime
 
  @@id([identifier, token])
}

model Consultant {
  id                  Int               @id @default(autoincrement())
  name                String
  joinedAt            DateTime          @default(now())
  specialization      String
  profilePicture      String?
  bio                 String?
  rate                Float
  availability        Boolean           @default(true)
  experience          Experience[]
  reviews             Review[]
  Booking             Booking[]
}

model Experience {
  id                  Int               @id @default(autoincrement())
  consultantId        Int
  title               String
  description         String
  startDate           DateTime
  endDate             DateTime?
  documentUrl         String[]
  consultant          Consultant        @relation(fields: [consultantId], references: [id])
}
model Booking {
  id                  String               @id @default(cuid())
  consultantId        Int
  userId              String
  startTime           DateTime
  endTime             DateTime
  status              String            @default("pending")
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  consultant          Consultant        @relation(fields: [consultantId], references: [id])
  user                User              @relation(fields: [userId], references: [id])
}

model Review {
  id                  Int               @id @default(autoincrement())
  consultantId        Int
  userId              String
  rating              Int
  comment             String?
  createdAt           DateTime          @default(now())
  consultant          Consultant        @relation(fields: [consultantId], references: [id])
  user                User              @relation(fields: [userId], references: [id])
}
model Membership {
  id                  Int               @id @default(autoincrement())
  userId              String
  startDate           DateTime          @default(now())
  endDate             DateTime?
  type                String            
  status              String            @default("active")
  user                User              @relation(fields: [userId], references: [id])
}
